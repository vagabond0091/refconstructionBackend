name: CI → ECR → EB

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '21' }
      - run: echo "Run unit tests here if needed"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (startsWith(github.ref,'refs/heads/master') || startsWith(github.ref,'refs/tags/'))
    permissions: { id-token: write, contents: read }
    env:
      AWS_REGION: ap-southeast-1
      ECR_REPO: refconstructionopc
      EB_APP_NAME: refconstructionopc
      EB_ENV_NAME: Refconstructionopc-env
      CONTAINER_PORT: "8080"
      VERSION_LABEL: v-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::140023375941:role/github-oidc-eb-deploy

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          REG="${{ steps.ecr.outputs.registry }}"
          IMAGE="$REG/${{ env.ECR_REPO }}"
          docker build -t $IMAGE:${{ github.sha }} .

      - name: Tag and push :latest and :sha
        run: |
          REG="${{ steps.ecr.outputs.registry }}"
          IMAGE="$REG/${{ env.ECR_REPO }}"
          docker tag  $IMAGE:${{ github.sha }} $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}
          docker push $IMAGE:latest

      - name: Generate Dockerrun.aws.json (v1) with :latest
        run: |
          IMAGE_URI="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest"
          cat > Dockerrun.aws.json <<JSON
          {
            "AWSEBDockerrunVersion": 1,
            "Image": { "Name": "$IMAGE_URI", "Update": "true" },
            "Ports": [ { "ContainerPort": ${{
              env.CONTAINER_PORT
            }} } ]
          }
          JSON
          cat Dockerrun.aws.json

      - name: Create EB bundle
        run: |
          rm -f SourceBundle.zip
          zip -q SourceBundle.zip Dockerrun.aws.json
          ls -lah

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          use_oidc: true
          aws_access_key: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
          region:             ${{ env.AWS_REGION }}
          application_name:   ${{ env.EB_APP_NAME }}
          environment_name:   ${{ env.EB_ENV_NAME }}
          version_label:      ${{ env.VERSION_LABEL }}
          deployment_package: SourceBundle.zip
          existing_bucket_name: elasticbeanstalk-ap-southeast-1-140023375941
          wait_for_deployment: true