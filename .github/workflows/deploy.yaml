name: Build → (PR verify) → ECR → Deploy to EB

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - run: echo "Run unit tests here if needed"
        shell: bash

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (startsWith(github.ref,'refs/heads/master') || startsWith(github.ref,'refs/tags/'))
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ap-southeast-1
      ECR_REPO: refconstructionopc
      EB_APP_NAME: refconstructionopc
      EB_ENV_NAME: Refconstructionopc-env
      CONTAINER_PORT: "8080"
      EB_BUCKET: elasticbeanstalk-ap-southeast-1-140023375941
      VERSION_LABEL: v-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.sha }}
      S3_KEY: refconstructionopc/${{ github.sha }}/SourceBundle.zip
    steps:
      - uses: actions/checkout@v4

      # Configure AWS via OIDC (no static keys)
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::140023375941:role/github-oidc-eb-deploy

      - name: Who am I
        run: aws sts get-caller-identity
        shell: bash

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}"
          docker build -t "${IMAGE}:${{ github.sha }}" .
        shell: bash

      - name: Push Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}"
          docker push "${IMAGE}:${{ github.sha }}"
        shell: bash

      - name: Verify image pushed
        run: |
          aws ecr describe-images \
            --repository-name "${{ env.ECR_REPO }}" \
            --image-ids imageTag="${{ github.sha }}"
        shell: bash

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        shell: bash

      # Generate a VALID Dockerrun v1 with a NUMERIC port
      - name: Generate Dockerrun.aws.json (v1) and validate
        run: |
          IMAGE_URI="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}"
          jq -n \
            --arg img "$IMAGE_URI" \
            --argjson port $(( ${{ env.CONTAINER_PORT }} )) \
            '{AWSEBDockerrunVersion:1, Image:{Name:$img, Update:"true"}, Ports:[{ContainerPort:$port}]}' \
            > Dockerrun.aws.json

          echo "Validating Dockerrun:"
          jq -e '.AWSEBDockerrunVersion==1' Dockerrun.aws.json >/dev/null
          jq -e '.Ports[0].ContainerPort|type=="number"' Dockerrun.aws.json >/dev/null
          cat Dockerrun.aws.json
        shell: bash

      # ZIP **only** Dockerrun.aws.json so EB won't see your repo Dockerfile
      - name: Create EB source bundle
        run: |
          rm -f SourceBundle.zip
          zip -q SourceBundle.zip Dockerrun.aws.json
          echo "Bundle contents:"
          unzip -l SourceBundle.zip
        shell: bash

      # Upload the bundle to the EB bucket
      - name: Upload bundle to S3
        run: |
          aws s3 cp SourceBundle.zip "s3://${{ env.EB_BUCKET }}/${{ env.S3_KEY }}"
          aws s3api head-object --bucket "${{ env.EB_BUCKET }}" --key "${{ env.S3_KEY }}"
        shell: bash

      # Create a new EB application version pointing at that S3 object
      - name: Create EB application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APP_NAME }}" \
            --version-label   "${{ env.VERSION_LABEL }}" \
            --source-bundle   S3Bucket="${{ env.EB_BUCKET }}",S3Key="${{ env.S3_KEY }}" \
            --auto-create-application
        shell: bash

      # Deploy it to the environment
      - name: Update EB environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ env.EB_ENV_NAME }}" \
            --version-label    "${{ env.VERSION_LABEL }}"
        shell: bash

      # Wait until the environment finishes updating, then dump recent events
      - name: Wait for environment to finish updating
        run: |
          echo "Waiting for environment update..."
          aws elasticbeanstalk wait environment-updated \
            --environment-names "${{ env.EB_ENV_NAME }}"
          echo "Recent EB events:"
          aws elasticbeanstalk describe-events \
            --environment-name "${{ env.EB_ENV_NAME }}" \
            --max-items 20 \
            --query 'Events[].{Time:EventDate, Message:Message, Severity:Severity}' \
            --output table
        shell: bash
