name: CI â†’ EB (Dockerfile, no ECR)

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Build JAR (optional)
        run: mvn -B -DskipTests package

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (startsWith(github.ref,'refs/heads/master') || startsWith(github.ref,'refs/tags/'))
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ap-southeast-1
      EB_APP_NAME: refconstructionopc
      EB_ENV_NAME: refconstructionopc-docker
      EB_BUCKET: elasticbeanstalk-ap-southeast-1-140023375941
      VERSION_LABEL: v-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.sha }}
      S3_KEY: refconstructionopc/${{ github.sha }}.zip
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::140023375941:role/github-oidc-eb-deploy

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Validate Dockerfile
        run: |
          test -f Dockerfile || { echo " Dockerfile missing at repo root"; exit 1; }
          head -n 30 Dockerfile || true

      - name: Create EB SourceBundle (Dockerfile mode, NO Dockerrun)
        run: |
          set -e
          if find . -type f -iname 'dockerrun*.json' | grep -qi .; then
            echo " Dockerrun found in repo. Remove it for Dockerfile mode."
            exit 1
          fi
          rm -f SourceBundle*.zip
          zip -qr SourceBundle.zip . -x ".git/*" ".github/*" "SourceBundle*.zip"
          unzip -l SourceBundle.zip | awk '{print $4}' | grep -qx 'Dockerfile' \
            || { echo " Dockerfile not in bundle root"; exit 1; }
          echo " Bundle looks good."

      - name: Upload bundle to EB S3
        run: |
          aws s3 cp SourceBundle.zip "s3://${EB_BUCKET}/${S3_KEY}"
          aws s3 ls "s3://${EB_BUCKET}/${S3_KEY}"

      - name: Create EB application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${EB_APP_NAME}" \
            --version-label "${VERSION_LABEL}" \
            --source-bundle S3Bucket="${EB_BUCKET}",S3Key="${S3_KEY}"

      # ðŸ”Ž Only proceed if env is Ready (skip update if it's already in a stuck Updating state)
      - id: check_env
        name: Check EB environment status
        run: |
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names "${EB_ENV_NAME}" \
            --query "Environments[0].Status" --output text)
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names "${EB_ENV_NAME}" \
            --query "Environments[0].Health" --output text)
          echo "status=${STATUS}" >> "$GITHUB_OUTPUT"
          echo "health=${HEALTH}" >> "$GITHUB_OUTPUT"
          if [ "$STATUS" = "Ready" ]; then echo "ready=true" >> "$GITHUB_OUTPUT"; else echo "ready=false" >> "$GITHUB_OUTPUT"; fi
          echo "EB Status: $STATUS | Health: $HEALTH"

      - name: Update environment to new version (skips if not Ready)
        if: steps.check_env.outputs.ready == 'true'
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${EB_ENV_NAME}" \
            --version-label "${VERSION_LABEL}"


      - name: Show recent EB environment events
        if: always()
        run: |
          aws elasticbeanstalk describe-events \
            --application-name "${EB_APP_NAME}" \
            --environment-name "${EB_ENV_NAME}" \
            --max-records 50 \
            --query 'Events[].{When:EventDate,S:Severity,Msg:Message}' \
            --output table
