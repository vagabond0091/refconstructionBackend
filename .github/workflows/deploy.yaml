name: Build → (PR verify) → ECR → Deploy to EB

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  build:
    name: Build & Verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK (if Java)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Build (no deploy)
        run: |
          echo "Run your unit tests here"
          # ./mvnw -B -DskipTests=false test

  deploy:
    name: Push to ECR & Deploy to EB
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'push' &&
      (startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/tags/'))
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ap-southeast-1
      ECR_REPO: refconstructionopc
      EB_APP_NAME: refconstructionopc
      EB_ENV_NAME: Refconstructionopc-env
      CONTAINER_PORT: 8080

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::140023375941:role/github-oidc-eb-deploy

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}"
          GIT_SHA="${{ github.sha }}"
          docker build -t ${IMAGE}:$GIT_SHA -t ${IMAGE}:latest .

      - name: Push Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}"
          docker push ${IMAGE}:latest
          docker push ${IMAGE}:${{ github.sha }}

      - name: Generate Dockerrun.aws.json (v2)
        run: |
          cat > Dockerrun.aws.json <<JSON
          {
            "AWSEBDockerrunVersion": 2,
            "containerDefinitions": [
              {
                "name": "app",
                "image": "140023375941.dkr.ecr.ap-southeast-1.amazonaws.com/refconstructionopc:latest",
                "essential": true,
                "memory": 512,
                "portMappings": [{ "hostPort": 80, "containerPort": ${{ env.CONTAINER_PORT }} }]
              }
            ]
          }
          JSON
          zip SourceBundle.zip Dockerrun.aws.json

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          region: ${{ env.AWS_REGION }}                 # <-- FIXED key
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: v-${{ github.run_number }}-${{ github.sha }}
          deployment_package: SourceBundle.zip
          wait_for_deployment: true
