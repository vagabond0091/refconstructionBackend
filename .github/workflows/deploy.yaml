name: Build â†’ (PR verify) â†’ ECR â†’ Deploy to EB

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  build:
    name: Build & Verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Build (unit tests optional)
        run: |
          echo "Run unit tests here if needed"
          # ./mvnw -B test

  deploy:
    name: Push to ECR & Deploy to EB
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'push' &&
      (startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/tags/'))
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ap-southeast-1
      ECR_REPO: refconstructionopc
      EB_APP_NAME: refconstructionopc
      EB_ENV_NAME: Refconstructionopc-env
      CONTAINER_PORT: 8080
      VERSION_LABEL: v-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # ðŸ”¹ 1. Configure AWS using OIDC role
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::140023375941:role/github-oidc-eb-deploy

      # Debug
      - name: Debug AWS Identity
        run: aws sts get-caller-identity

      #  2. Login to ECR
      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      #  3. Build Docker image (tagged with commit SHA)
      - name: Build Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}"
          GIT_SHA="${{ github.sha }}"
          docker build -t ${IMAGE}:${GIT_SHA} .

      #  4. Push Docker image
      - name: Push Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}"
          docker push ${IMAGE}:${{ github.sha }}

      #  5. Verify image if it was pushed
      - name: Verify image pushed
        run: |
          aws ecr describe-images \
            --repository-name "${{ env.ECR_REPO }}" \
            --image-ids imageTag="${{ github.sha }}"

      # >>> ADDED: Generate Dockerrun.aws.json (single-container v1) <<<
      - name: Generate Dockerrun.aws.json (v1)
        run: |
          IMAGE_URI="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}"
          cat > Dockerrun.aws.json <<'JSON'
          {
            "AWSEBDockerrunVersion": 1,
            "Image": {
              "Name": "__IMAGE_URI__",
              "Update": "true"
            },
            "Ports": [
              { "ContainerPort": "__PORT__" }
            ]
          }
          JSON
          sed -i "s|__IMAGE_URI__|${IMAGE_URI}|g" Dockerrun.aws.json
          sed -i "s|__PORT__|${{ env.CONTAINER_PORT }}|g" Dockerrun.aws.json
          echo "Generated Dockerrun.aws.json:"
          cat Dockerrun.aws.json

      # >>> ADDED: Create the EB source bundle used by the deploy step <<<
      - name: Create EB bundle (SourceBundle.zip)
        run: |
          zip -q SourceBundle.zip Dockerrun.aws.json
          ls -lah
          test -f SourceBundle.zip || { echo "SourceBundle.zip not found"; exit 1; }

      # 6. Deploy to EB (explicitly passing AWS creds)
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
          region: ${{ env.AWS_REGION }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: ${{ env.VERSION_LABEL }}
          deployment_package: SourceBundle.zip
          existing_bucket_name: elasticbeanstalk-ap-southeast-1-140023375941
          wait_for_deployment: true
